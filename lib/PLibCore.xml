<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PLibCore</name>
    </assembly>
    <members>
        <member name="T:PeterHan.PLib.Detours.DetouredField`2">
            <summary>
            Stores delegates used to read and write fields or properties.
            </summary>
            <typeparam name="P">The containing type of the field or property.</typeparam>
            <typeparam name="T">The element type of the field or property.</typeparam>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredField`2.Get">
            <summary>
            Invoke to get the field/property value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredField`2.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredField`2.Set">
            <summary>
            Invoke to set the field/property value. Null if the field is const or readonly.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.DetouredMethod`1">
            <summary>
            Stores a detoured method, only performing the expensive reflection when the detour is
            first used.
            
            This class is not thread safe.
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredMethod`1.Invoke">
            <summary>
            Emulates the ability of Delegate.Invoke to actually call the method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.DetouredMethod`1.Name">
            <summary>
            The method name.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.DetouredMethod`1.delg">
            <summary>
            The delegate method which will be called.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.DetouredMethod`1.type">
            <summary>
            The target type.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.DetouredMethod`1.Initialize">
            <summary>
            Initializes the getter and setter functions immediately if necessary.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.DetourException">
            <summary>
            An exception thrown when constructing a detour.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.IDetouredField`2">
            <summary>
            An interface that describes a detoured field, which stores delegates used to read and
            write fields or properties.
            </summary>
            <typeparam name="P">The containing type of the field or property.</typeparam>
            <typeparam name="T">The element type of the field or property.</typeparam>
        </member>
        <member name="P:PeterHan.PLib.Detours.IDetouredField`2.Get">
            <summary>
            Invoke to get the field/property value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.IDetouredField`2.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.IDetouredField`2.Set">
            <summary>
            Invoke to set the field/property value.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.LazyDetouredField`2">
            <summary>
            Stores delegates used to read and write fields or properties. This version is lazy and
            only calculates the destination when it is first used.
            
            This class is not thread safe.
            </summary>
            <typeparam name="P">The containing type of the field or property.</typeparam>
            <typeparam name="T">The element type of the field or property.</typeparam>
        </member>
        <member name="P:PeterHan.PLib.Detours.LazyDetouredField`2.Get">
            <summary>
            Invoke to get the field/property value.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.LazyDetouredField`2.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Detours.LazyDetouredField`2.Set">
            <summary>
            Invoke to set the field/property value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.LazyDetouredField`2.getter">
            <summary>
            The function to get the field value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.LazyDetouredField`2.setter">
            <summary>
            The function to set the field value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.LazyDetouredField`2.type">
            <summary>
            The target type.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.LazyDetouredField`2.Initialize">
            <summary>
            Initializes the getter and setter functions immediately if necessary.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Detours.PDetours">
            <summary>
            Efficiently detours around many changes in the game by creating detour methods and
            accessors which are resilient against many types of source compatible but binary
            incompatible changes.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Type)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the same name as the delegate type. The dynamic method will
            automatically adapt if optional parameters are added, filling in their default
            values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <returns>The detour that will call the method with the name of the delegate type.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Type,System.String)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the specified name. The dynamic method will automatically adapt if
            optional parameters are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <param name="name">The method name.</param>
            <returns>The detour that will call that method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourConstructor``1(System.Type)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            constructor. The dynamic method will automatically adapt if optional parameters
            are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <returns>The detour that will call that type's constructor.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourLazy``1(System.Type,System.String)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the specified name. The dynamic method will automatically adapt if
            optional parameters are added, filling in their default values.
            
            This overload creates a lazy detour that only performs the expensive reflection
            when it is first used.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="type">The target type.</param>
            <param name="name">The method name.</param>
            <returns>The detour that will call that method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match any valid target method.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Reflection.MethodInfo)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            method with the specified name. The dynamic method will automatically adapt if
            optional parameters are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="target">The target method to be called.</param>
            <returns>The detour that will call that method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match the target.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.Detour``1(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a dynamic detour method of the specified delegate type to wrap a base game
            constructor. The dynamic method will automatically adapt if optional parameters
            are added, filling in their default values.
            </summary>
            <typeparam name="D">The delegate type to be used to call the detour.</typeparam>
            <param name="target">The target constructor to be called.</param>
            <returns>The detour that will call that constructor.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match the target.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourField``2(System.String)">
            <summary>
            Creates dynamic detour methods to wrap a base game field or property with the
            specified name. The detour will still work even if the field is converted to a
            source compatible property and vice versa.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the field or property element.</typeparam>
            <param name="name">The name of the field or property to be accessed.</param>
            <returns>A detour element that wraps the field or property with common getter and
            setter delegates which will work on both types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourFieldLazy``2(System.String)">
            <summary>
            Creates dynamic detour methods to wrap a base game field or property with the
            specified name. The detour will still work even if the field is converted to a
            source compatible property and vice versa.
            
            This overload creates a lazy detour that only performs the expensive reflection
            when it is first used.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the field or property element.</typeparam>
            <param name="name">The name of the field or property to be accessed.</param>
            <returns>A detour element that wraps the field or property with common getter and
            setter delegates which will work on both types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourField``2(System.Reflection.FieldInfo)">
            <summary>
            Creates dynamic detour methods to wrap a base game field with the specified name.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the field element.</typeparam>
            <param name="target">The field which will be accessed.</param>
            <returns>A detour element that wraps the field with a common interface matching
            that of a detoured property.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourProperty``2(System.Reflection.PropertyInfo)">
            <summary>
            Creates dynamic detour methods to wrap a base game property with the specified name.
            </summary>
            <typeparam name="P">The type of the parent class.</typeparam>
            <typeparam name="T">The type of the property element.</typeparam>
            <param name="target">The property which will be accessed.</param>
            <returns>A detour element that wraps the property with a common interface matching
            that of a detoured field.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the property has indexers.</exception>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DetourStructField``1(System.Type,System.String)">
            <summary>
            Creates dynamic detour methods to wrap a base game struct field with the specified
            name. For static struct fields, use the regular DetourField.
            </summary>
            <typeparam name="T">The type of the field element.</typeparam>
            <param name="parentType">The struct type which will be accessed.</param>
            <param name="name">The name of the struct field to be accessed.</param>
            <returns>A detour element that wraps the field with a common interface matching
            that of a detoured property.</returns>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.FinishDynamicMethod(System.Reflection.Emit.DynamicMethod,System.Reflection.ParameterInfo[],System.Type[],System.Int32)">
            <summary>
            Generates the required method parameters for the dynamic detour method.
            </summary>
            <param name="caller">The method where the parameters will be defined.</param>
            <param name="actualParams">The actual parameters required.</param>
            <param name="expectedParams">The parameters provided.</param>
            <param name="offset">The offset to start loading (0 = static, 1 = instance).</param>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.LoadParameters(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo[],System.Type[],System.Int32)">
            <summary>
            Generates instructions to load arguments or default values onto the stack in a
            detour method.
            </summary>
            <param name="generator">The method where the calls will be added.</param>
            <param name="actualParams">The actual parameters required.</param>
            <param name="expectedParams">The parameters provided.</param>
            <param name="offset">The offset to start loading (0 = static, 1 = instance).</param>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.ValidateDelegate(PeterHan.PLib.Detours.PDetours.DelegateInfo,System.Reflection.MethodBase,System.Type)">
            <summary>
            Verifies that the delegate signature provided in dst can be dynamically mapped to
            the method provided by src, with the possible addition of optional parameters set
            to their default values.
            </summary>
            <param name="expected">The method return type and parameter types expected.</param>
            <param name="actual">The method to be called.</param>
            <param name="actualReturn">The type of the method or constructor's return value.</param>
            <returns>The parameters used in the call to the actual method.</returns>
            <exception cref="T:PeterHan.PLib.Detours.DetourException">If the delegate does not match the target.</exception>
        </member>
        <member name="T:PeterHan.PLib.Detours.PDetours.DelegateInfo">
            <summary>
            Stores information about a delegate.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Detours.PDetours.DelegateInfo.Create(System.Type)">
            <summary>
            Creates delegate information on the specified delegate type.
            </summary>
            <param name="delegateType">The delegate type to wrap.</param>
            <returns>Information about that delegate's return and parameter types.</returns>
        </member>
        <member name="F:PeterHan.PLib.Detours.PDetours.DelegateInfo.DelegateType">
            <summary>
            The delegate's type.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.PDetours.DelegateInfo.ParameterTypes">
            <summary>
            The delegate's parameter types.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Detours.PDetours.DelegateInfo.ReturnType">
            <summary>
            The delegate's return types.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.ExtensionMethods">
            <summary>
            Extension methods to make life easier!
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.F(System.String,System.Object[])">
            <summary>
            Shorthand for string.Format() which can be invoked directly on the message.
            </summary>
            <param name="message">The format template message.</param>
            <param name="args">The substitutions to be included.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.GetComponentSafe``1(UnityEngine.GameObject)">
            <summary>
            Retrieves a component, but returns null if the GameObject is disposed.
            </summary>
            <typeparam name="T">The component type to retrieve.</typeparam>
            <param name="obj">The GameObject that hosts the component.</param>
            <returns>The requested component, or null if it does not exist</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.GetNameSafe(System.Reflection.Assembly)">
            <summary>
            Gets the assembly name of an assembly.
            </summary>
            <param name="assembly">The assembly to query.</param>
            <returns>The assembly name, or null if assembly is null.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the file version of the specified assembly.
            </summary>
            <param name="assembly">The assembly to query</param>
            <returns>The AssemblyFileVersion of that assembly, or null if it could not be determined.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.InRange(System.Double,System.Double,System.Double)">
            <summary>
            Coerces a floating point number into the specified range.
            </summary>
            <param name="value">The original number.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
            <returns>The nearest value between minimum and maximum inclusive to value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.InRange(System.Single,System.Single,System.Single)">
            <summary>
            Coerces a floating point number into the specified range.
            </summary>
            <param name="value">The original number.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
            <returns>The nearest value between minimum and maximum inclusive to value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Coerces an integer into the specified range.
            </summary>
            <param name="value">The original number.</param>
            <param name="min">The minimum value (inclusive).</param>
            <param name="max">The maximum value (inclusive).</param>
            <returns>The nearest value between minimum and maximum inclusive to value.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsFalling(UnityEngine.GameObject)">
            <summary>
            Checks to see if an object is falling.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>true if it is falling, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsNaNOrInfinity(System.Double)">
            <summary>
            Checks to see if a floating point value is NaN or infinite.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if it is NaN, PositiveInfinity, or NegativeInfinity, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsNaNOrInfinity(System.Single)">
            <summary>
            Checks to see if a floating point value is NaN or infinite.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if it is NaN, PositiveInfinity, or NegativeInfinity, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.IsUsable(UnityEngine.GameObject)">
            <summary>
            Checks to see if a building is usable.
            </summary>
            <param name="building">The building component to check.</param>
            <returns>true if it is usable (enabled, not broken, not overheated), or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.Join(System.Collections.IEnumerable,System.String)">
            <summary>
            Creates a string joining the members of an enumerable.
            </summary>
            <param name="values">The values to join.</param>
            <param name="delimiter">The delimiter to use between values.</param>
            <returns>A string consisting of each value in order, with the delimiter in between.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.Patch(HarmonyLib.Harmony,System.Type,System.String,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)">
            <summary>
            Patches a method manually.
            </summary>
            <param name="instance">The Harmony instance.</param>
            <param name="type">The class to modify.</param>
            <param name="methodName">The method to patch.</param>
            <param name="prefix">The prefix to apply, or null if none.</param>
            <param name="postfix">The postfix to apply, or null if none.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.PatchConstructor(HarmonyLib.Harmony,System.Type,System.Type[],HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)">
            <summary>
            Patches a constructor manually.
            </summary>
            <param name="instance">The Harmony instance.</param>
            <param name="type">The class to modify.</param>
            <param name="arguments">The constructor's argument types.</param>
            <param name="prefix">The prefix to apply, or null if none.</param>
            <param name="postfix">The postfix to apply, or null if none.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.PatchTranspile(HarmonyLib.Harmony,System.Type,System.String,HarmonyLib.HarmonyMethod)">
            <summary>
            Patches a method manually with a transpiler.
            </summary>
            <param name="instance">The Harmony instance.</param>
            <param name="type">The class to modify.</param>
            <param name="methodName">The method to patch.</param>
            <param name="transpiler">The transpiler to apply.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.ExtensionMethods.SetParent(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Sets a game object's parent.
            </summary>
            <param name="child">The game object to modify.</param>
            <param name="parent">The new parent object.</param>
            <returns>The game object, for call chaining.</returns>
        </member>
        <member name="T:PeterHan.PLib.Core.IPLibRegistry">
            <summary>
            An interface used for both local and remote PLib registry instances.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.IPLibRegistry.ModData">
            <summary>
            Data shared between mods in key value pairs.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.AddCandidateVersion(PeterHan.PLib.Core.PForwardedComponent)">
            <summary>
            Adds a candidate version of a forwarded component.
            </summary>
            <param name="instance">The instance of the component to add.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.GetLatestVersion(System.String)">
            <summary>
            Gets the latest version of a forwarded component of PLib (or another mod).
            </summary>
            <param name="id">The component ID to look up.</param>
            <returns>The latest version of that component, or a forwarded proxy of the
            component if functionality is provided by another mod.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.GetSharedData(System.String)">
            <summary>
            Gets the shared data for a particular component.
            </summary>
            <param name="id">The component ID that holds the data.</param>
            <returns>The shared data for components with that ID, or null if no component by
            that name was found, or if the data is unset.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.GetAllComponents(System.String)">
            <summary>
            Gets all registered forwarded components for the given ID.
            </summary>
            <param name="id">The component ID to look up.</param>
            <returns>All registered components with that ID, with forwarded proxies for any
            whose functionality is provided by another mod.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.IPLibRegistry.SetSharedData(System.String,System.Object)">
            <summary>
            Sets the shared data for a particular component.
            </summary>
            <param name="id">The component ID that holds the data.</param>
            <param name="data">The new shared data value.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.IRefreshUserMenu">
            <summary>
            Implemented by classes which want to use the utility user menu refresh to save some
            boilerplate code.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.IRefreshUserMenu.OnRefreshUserMenu">
            <summary>
            Called when the user button menu in the info panel is refreshed. Since the
            arguments are always null, no parameter is passed.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PForwardedComponent">
            <summary>
            A library component that is forwarded across multiple assemblies, to allow only the
            latest version available on the system to run. Provides methods to marshal some
            objects across the assembly boundaries.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PForwardedComponent.MAX_DEPTH">
            <summary>
            The default maximum serialization depth for marshaling data.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.InstanceData">
            <summary>
            The data stored in this object. It can be retrieved, with optional round trip
            serialization, by the instantiated version of this component.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.ID">
            <summary>
            The ID used by PLib for this component.
            
            This method is non-virtual for a reason, as the ID is sometimes only available
            on methods of type object, so GetType().FullName is used directly there.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.SerializationSettings">
            <summary>
            The JSON serialization settings to be used if the Data is marshaled across
            assembly boundaries.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PForwardedComponent.Version">
            <summary>
            Retrieves the version of the component provided by this assembly.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PForwardedComponent.registered">
            <summary>
            Whether this object has been registered.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PForwardedComponent.candidateLock">
            <summary>
            Serializes access to avoid race conditions when registering this component.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.Bootstrap(HarmonyLib.Harmony)">
            <summary>
            Called only on the first instance of a particular component to be registered.
            For some particular components that need very early patches, this call might be
            required to initialize state before the rest of the forwarded components are
            initialized. However, this call might occur on a version that is not the latest of
            this component in the system, or on an instance that will not be instantiated or
            initialized by the other callbacks.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.DoInitialize(HarmonyLib.Harmony)">
            <summary>
            Initializes this component. Only called on the version that is selected as the
            latest.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetInstanceData``1(``0)">
            <summary>
            Gets the data from this component as a specific type. Only works if the type is
            shared across all mods (in some shared assembly's memory space) such as types in
            System or the base game.
            </summary>
            <typeparam name="T">The data type to retrieve.</typeparam>
            <param name="defValue">The default value if the instance data is unset.</param>
            <returns>The data, or defValue if the instance data has not been set.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetInstanceDataSerialized``1(``0)">
            <summary>
            Gets the data from this component, serialized to the specified type. The data is
            retrieved from the base component, serialized with JSON, and reconstituted as type
            T in the memory space of the caller.
            
            The target type must exist and be a [JsonObject] in both this assembly and the
            target component's assembly.
            
            This method is somewhat slow and memory intensive, and should be used sparingly.
            </summary>
            <typeparam name="T">The data type to retrieve and into which to convert.</typeparam>
            <param name="defValue">The default value if the instance data is unset.</param>
            <returns>The data, or defValue if the instance data has not been set or cannot be serialized.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetSharedData``1(``0)">
            <summary>
            Gets the shared data between components with this ID as a specific type. Only works
            if the type is shared across all mods (in some shared assembly's memory space) such
            as types in System or the base game.
            </summary>
            <typeparam name="T">The data type to retrieve.</typeparam>
            <param name="defValue">The default value if the shared data is unset.</param>
            <returns>The data, or defValue if the shared data has not been set.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetSharedDataSerialized``1(``0)">
            <summary>
            Gets the shared data between components with this ID, serialized to the specified
            type. The shared data is retrieved, serialized with JSON, and reconstituted as type
            T in the memory space of the caller.
            
            The target type must exist and be a [JsonObject] in both this assembly and the
            target component's assembly.
            
            This method is somewhat slow and memory intensive, and should be used sparingly.
            </summary>
            <typeparam name="T">The data type to retrieve and into which to convert.</typeparam>
            <param name="defValue">The default value if the shared data is unset.</param>
            <returns>The data, or defValue if the shared data has not been set or cannot be serialized.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.GetOwningAssembly">
            <summary>
            Gets the assembly which provides this component.
            </summary>
            <returns>The assembly which owns this component.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.Initialize(HarmonyLib.Harmony)">
            <summary>
            Initializes this component. Only called on the version that is selected as the
            latest. Component initialization order is undefined, so anything relying on another
            component cannot be used until PostInitialize.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.InvokeAllProcess(System.UInt32,System.Object)">
            <summary>
            Invokes the Process method on all registered components of this type.
            </summary>
            <param name="operation">The operation to pass to Process.</param>
            <param name="args">The arguments to pass to Process.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.PatchMethod(System.String)">
            <summary>
            Gets a HarmonyMethod instance for manual patching using a method from this class.
            </summary>
            <param name="name">The method name.</param>
            <returns>A reference to that method as a HarmonyMethod for patching.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.PostInitialize(HarmonyLib.Harmony)">
            <summary>
            Initializes this component. Only called on the version that is selected as the
            latest. Other components have been initialized when this method is called.
            </summary>
            <param name="plibInstance">The Harmony instance to use for patching if necessary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.Process(System.UInt32,System.Object)">
            <summary>
            Called on demand by the initialized instance to run processing in all other
            instances.
            </summary>
            <param name="operation">The operation to perform. The meaning of this parameter
            varies by component.</param>
            <param name="args">The arguments for processing.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.RegisterForForwarding">
            <summary>
            Registers this component into the list of versions available for forwarding. This
            method is thread safe. If this component instance is already registered, it will
            not be registered again.
            </summary>
            <returns>true if the component was registered, or false if it was already registered.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PForwardedComponent.SetSharedData(System.Object)">
            <summary>
            Sets the shared data between components with this ID. Only works if the type is
            shared across all mods (in some shared assembly's memory space) such as types in
            System or the base game.
            </summary>
            <param name="value">The new value for the shared data.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PGameUtils">
            <summary>
            Utility and helper functions to perform common game-related (not UI) tasks.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CenterAndSelect(KMonoBehaviour)">
            <summary>
            Centers and selects an entity.
            </summary>
            <param name="entity">The entity to center and focus.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CopySoundsToAnim(System.String,System.String)">
            <summary>
            Copies the sounds from one animation to another animation.
            </summary>
            <param name="dstAnim">The destination anim file name.</param>
            <param name="srcAnim">The source anim file name.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreatePopup(UnityEngine.Sprite,System.String,System.Int32)">
            <summary>
            Creates a popup message at the specified cell location on the Move layer.
            </summary>
            <param name="image">The image to display, likely from PopFXManager.Instance.</param>
            <param name="text">The text to display.</param>
            <param name="cell">The cell location to create the message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreatePopup(UnityEngine.Sprite,System.String,UnityEngine.Vector3)">
            <summary>
            Creates a popup message at the specified location.
            </summary>
            <param name="image">The image to display, likely from PopFXManager.Instance.</param>
            <param name="text">The text to display.</param>
            <param name="position">The position to create the message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.CreateUserMenuHandler``1">
            <summary>
            Creates a default user menu handler for a class implementing IRefreshUserMenu.
            </summary>
            <typeparam name="T">The class to handle events.</typeparam>
            <returns>A handler which can be used to Subscribe for RefreshUserMenu events.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.GetObjectLayer(System.String,ObjectLayer)">
            <summary>
            Retrieves an object layer by its name, resolving the value at runtime to handle
            differences in the layer enum. This method is slower than a direct lookup -
            consider caching the result.
            </summary>
            <param name="name">The name of the layer (use nameof()!)</param>
            <param name="defValue">The default value (use the value at compile time)</param>
            <returns>The value to use for this object layer.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.HighlightEntity(UnityEngine.Component,UnityEngine.Color)">
            <summary>
            Highlights an entity. Use Color.black to unhighlight it.
            </summary>
            <param name="entity">The entity to highlight.</param>
            <param name="highlightColor">The color to highlight it.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.PlaySound(System.String,UnityEngine.Vector3)">
            <summary>
            Plays a sound effect.
            </summary>
            <param name="name">The sound effect name to play.</param>
            <param name="position">The position where the sound is generated.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PGameUtils.SaveMods">
            <summary>
            Saves the current list of mods.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PLibCorePatches">
            <summary>
            A small component which applies core patches used by PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibCorePatches.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PLibCorePatches.Initialize_Postfix">
            <summary>
            Localizes all mods to the current locale.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PLibCorePatches.Register(PeterHan.PLib.Core.IPLibRegistry)">
            <summary>
            Registers this instance of the PLib core patches.
            </summary>
            <param name="instance">The registry instance to use (since PRegistry.Instance
            is not yet fully initialized).</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PLibLocalization">
            <summary>
            Handles localization of PLib for mods by automatically loading po files stored as
            EmbeddedResources in PLibCore.dll and ILMerged with the mod assembly.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibLocalization.TRANSLATIONS_EXT">
            <summary>
            The file extension used for localization files.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibLocalization.TRANSLATIONS_RES_PATH">
            <summary>
            The Prefix of LogicalName of EmbeddedResources that stores the content of po files.
            Must match the specified value in the Directory.Build.targets file.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PLibLocalization.LocalizeItself(Localization.Locale)">
            <summary>
            Localizes the PLib strings.
            </summary>
            <param name="locale">The locale to use.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PLibStrings">
            <summary>
            Strings used in PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_MANUAL">
            <summary>
            The button used to manually edit the mod configuration.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_RESET">
            <summary>
            The button used to reset the configuration to its default value.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_OK">
            <summary>
            The text shown on the Done button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.BUTTON_OPTIONS">
            <summary>
            The text shown on the Options button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.DIALOG_TITLE">
            <summary>
            The dialog title used for options, where {0} is substituted with the mod friendly name.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.KEY_CATEGORY_TITLE">
            <summary>
            The title used for the PLib key bind category.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MOD_ASSEMBLY_VERSION">
            <summary>
            The mod version in Mod Options if retrieved from the default AssemblyVersion, where
            {0} is substituted with the version text.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MOD_HOMEPAGE">
            <summary>
            The button text which goes to the mod's home page when clicked.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.MOD_VERSION">
            <summary>
            The mod version in Mod Options if specified via AssemblyFileVersion, where {0} is
            substituted with the version text.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.RESTART_CANCEL">
            <summary>
            The cancel button in the restart dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.RESTART_OK">
            <summary>
            The OK button in the restart dialog.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.OUTDATED_TOOLTIP">
            <summary>
            The details tooltip when AVC detects a mod to be outdated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.OUTDATED_WARNING">
            <summary>
            Displayed when AVC detects a mod to be outdated.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.RESTART_REQUIRED">
            <summary>
            The message prompting the user to restart.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_CANCEL">
            <summary>
            The tooltip on the CANCEL button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_HOMEPAGE">
            <summary>
            The tooltip on the Mod Homepage button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_MANUAL">
            <summary>
            The tooltip on the MANUAL CONFIG button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_NEXT">
            <summary>
            The tooltip for cycling to the next item.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_OK">
            <summary>
            The tooltip on the OK button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_PREVIOUS">
            <summary>
            The tooltip for cycling to the previous item.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_RESET">
            <summary>
            The tooltip on the RESET TO DEFAULT button.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_TOGGLE">
            <summary>
            The tooltip for each category visibility toggle.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PLibStrings.TOOLTIP_VERSION">
            <summary>
            The tooltip for the mod version.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PPatchTools">
            <summary>
            Contains tools to aid with patching.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PPatchTools.BASE_FLAGS">
            <summary>
            The base binding flags for all reflection methods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PPatchTools.AnyArguments">
            <summary>
            Passed to GetMethodSafe to match any method arguments.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateDelegate``1(System.Type,System.String,System.Object,System.Type[])">
            <summary>
            Creates a delegate for a private instance method. This delegate is over ten times
            faster than reflection, so useful if called frequently on the same object.
            </summary>
            <typeparam name="T">A delegate type which matches the method signature.</typeparam>
            <param name="type">The declaring type of the target method.</param>
            <param name="method">The target method name.</param>
            <param name="caller">The object on which to call the method.</param>
            <param name="argumentTypes">The types of the target method arguments, or PPatchTools.
            AnyArguments (not recommended, type safety is good) to match any static method with
            that name.</param>
            <returns>A delegate which calls this method, or null if the method could not be
            found or did not match the types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates a delegate for a private instance method. This delegate is over ten times
            faster than reflection, so useful if called frequently on the same object.
            </summary>
            <typeparam name="T">A delegate type which matches the method signature.</typeparam>
            <param name="type">The declaring type of the target method.</param>
            <param name="method">The target method.</param>
            <param name="caller">The object on which to call the method.</param>
            <returns>A delegate which calls this method, or null if the method was null or did
            not match the delegate type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateGetDelegate``1(System.Type,System.String,System.Object)">
            <summary>
            Creates a delegate for a private instance property getter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="type">The declaring type of the target property.</param>
            <param name="property">The target property name.</param>
            <param name="caller">The object on which to call the property getter.</param>
            <returns>A delegate which calls this property's getter, or null if the property
            could not be found or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateGetDelegate``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a delegate for a private instance property getter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="property">The target property.</param>
            <param name="caller">The object on which to call the property getter.</param>
            <returns>A delegate which calls this property's getter, or null if the property
            was null or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateSetDelegate``1(System.Type,System.String,System.Object)">
            <summary>
            Creates a delegate for a private instance property setter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="type">The declaring type of the target property.</param>
            <param name="property">The target property name.</param>
            <param name="caller">The object on which to call the property setter.</param>
            <returns>A delegate which calls this property's setter, or null if the property
            could not be found or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateSetDelegate``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a delegate for a private instance property setter. This delegate is over
            ten times faster than reflection, so useful if called frequently on the same object.
            
            This method does not work on indexed properties.
            </summary>
            <typeparam name="T">The property's type.</typeparam>
            <param name="property">The target property.</param>
            <param name="caller">The object on which to call the property setter.</param>
            <returns>A delegate which calls this property's setter, or null if the property
            was null or did not match the type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.CreateStaticDelegate``1(System.Type,System.String,System.Type[])">
            <summary>
            Creates a delegate for a private static method. This delegate is over ten times
            faster than reflection, so useful if called frequently.
            </summary>
            <typeparam name="T">A delegate type which matches the method signature.</typeparam>
            <param name="type">The declaring type of the target method.</param>
            <param name="method">The target method name.</param>
            <param name="argumentTypes">The types of the target method arguments, or PPatchTools.
            AnyArguments (not recommended, type safety is good) to match any static method with
            that name.</param>
            <returns>A delegate which calls this method, or null if the method could not be
            found or did not match the types.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.DumpMethodBody(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Dumps the IL body of the method to the debug log.
            
            Only to be used for debugging purposes.
            </summary>
            <param name="opcodes">The IL instructions to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.FormatArgument(System.Object)">
            <summary>
            This method was taken directly from Harmony (https://github.com/pardeike/Harmony)
            which is also available under the MIT License.
            </summary>
            <param name="argument">The argument to format.</param>
            <returns>The IL argument in string form.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.FormatMethodCall(System.Text.StringBuilder,System.Reflection.MethodBase)">
            <summary>
            Formats a method call for logging.
            </summary>
            <param name="result">The location where the log is stored.</param>
            <param name="method">The method that is called.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetFieldSafe(System.Type,System.String,System.Boolean)">
            <summary>
            Retrieves a field using reflection, or returns null if it does not exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="fieldName">The field name.</param>
            <param name="isStatic">true to find static fields, or false to find instance
            fields.</param>
            <returns>The field, or null if no such field could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetMatchingStoreInstruction(HarmonyLib.CodeInstruction)">
            <summary>
            Creates a store instruction to the same local as the specified load instruction.
            </summary>
            <param name="load">The initial load instruction.</param>
            <returns>The counterbalancing store instruction.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetMethodSafe(System.Type,System.String,System.Boolean,System.Type[])">
            <summary>
            Retrieves a method using reflection, or returns null if it does not exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="methodName">The method name.</param>
            <param name="isStatic">true to find static methods, or false to find instance
            methods.</param>
            <param name="arguments">The method argument types. If null is provided, any
            argument types are matched, whereas no arguments match only void methods.</param>
            <returns>The method, or null if no such method could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetPropertySafe``1(System.Type,System.String,System.Boolean)">
            <summary>
            Retrieves a property using reflection, or returns null if it does not exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="propName">The property name.</param>
            <param name="isStatic">true to find static properties, or false to find instance
            properties.</param>
            <typeparam name="T">The property field type.</typeparam>
            <returns>The property, or null if no such property could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetPropertyIndexedSafe``1(System.Type,System.String,System.Boolean,System.Type[])">
            <summary>
            Retrieves an indexed property using reflection, or returns null if it does not
            exist.
            </summary>
            <param name="type">The base type.</param>
            <param name="propName">The property name.</param>
            <param name="isStatic">true to find static properties, or false to find instance
            properties.</param>
            <param name="arguments">The property indexer's arguments.</param>
            <typeparam name="T">The property field type.</typeparam>
            <returns>The property, or null if no such property could be found.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.GetTypeSafe(System.String,System.String)">
            <summary>
            Retrieves a type using its full name (including namespace). However, the assembly
            name is optional, as this method searches all assemblies in the current
            AppDomain if it is null or empty.
            </summary>
            <param name="name">The type name to retrieve.</param>
            <param name="assemblyName">If specified, the name of the assembly that contains
            the type. No other assembly name will be searched if this parameter is not null
            or empty. The assembly name might not match the DLL name, use a decompiler to
            make sure.</param>
            <returns>The type, or null if the type is not found or cannot be loaded.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.HasPatchWithMethodName(HarmonyLib.Harmony,System.Reflection.MethodBase,HarmonyLib.HarmonyPatchType,System.String)">
            <summary>
            Checks to see if a patch with the specified method name (the method used in the
            patch class) and type is defined.
            </summary>
            <param name="instance">The Harmony instance to query for patches. Unused.</param>
            <param name="target">The target method to search for patches.</param>
            <param name="type">The patch type to look up.</param>
            <param name="name">The patch method name to look up (name as declared by patch owner).</param>
            <returns>true if such a patch was found, or false otherwise</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.HasPatchWithMethodName(System.Collections.Generic.IEnumerable{HarmonyLib.Patch},System.String)">
            <summary>
            Checks to see if the patch list has a method with the specified name.
            </summary>
            <param name="patchList">The patch list to search.</param>
            <param name="name">The declaring method name to look up.</param>
            <returns>true if a patch matches that name, or false otherwise</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.IsConditionalBranchInstruction(System.Reflection.Emit.OpCode)">
            <summary>
            Checks to see if an instruction opcode is a branch instruction.
            </summary>
            <param name="opcode">The opcode to check.</param>
            <returns>true if it is a branch, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.LogAllExceptions">
            <summary>
            Adds a logger to all unhandled exceptions.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.LogAllFailedAsserts">
            <summary>
            Adds a logger to all failed assertions. The assertions will still fail, but a stack
            trace will be printed for each failed assertion.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Double,System.Double,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Single,System.Single,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            
            Note that values of type byte, short, char, and bool are also represented with "i4"
            constants which can be targeted by this method.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceConstant(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Int64,System.Int64,System.Boolean)">
            <summary>
            Transpiles a method to replace instances of one constant value with another.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="oldValue">The old constant to remove.</param>
            <param name="newValue">The new constant to replace.</param>
            <param name="all">true to replace all instances, or false to replace the first
            instance (default).</param>
            <returns>A transpiled version of that method which replaces instances of the first
            constant with that of the second.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceMethodCall(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Transpiles a method to replace all calls to the specified victim method with
            another method, altering the call type if necessary. The argument types and return
            type must match exactly, including in/out/ref parameters.
            
            If replacing an instance method call with a static method, the first argument
            will receive the "this" which the old method would have received.
            
            If newMethod is null, the calls will all be removed silently instead. This will
            fail if the method call being removed had a return type (what would it be replaced
            with?); in those cases, declare an empty method with the same signature and
            replace it instead.
            </summary>
            <param name="method">The method to patch.</param>
            <param name="victim">The old method calls to remove.</param>
            <param name="newMethod">The new method to replace, or null to delete the calls.</param>
            <returns>A transpiled version of that method that replaces or removes all calls
            to method.</returns>
            <exception cref="T:System.ArgumentException">If the new method's argument types do not
            exactly match the old method's argument types.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.ReplaceMethodCall(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Collections.Generic.IDictionary{System.Reflection.MethodInfo,System.Reflection.MethodInfo})">
            <summary>
            Transpiles a method to replace calls to the specified victim methods with
            replacement methods, altering the call type if necessary.
            
            Each key to value pair must meet the criteria defined in
            ReplaceMethodCall(TranspiledMethod, MethodInfo, MethodInfo).
            </summary>
            <param name="method">The method to patch.</param>
            <param name="translation">A mapping from the old method calls to replace, to the
            new method calls to use instead.</param>
            <returns>A transpiled version of that method that replaces or removes all calls
            to the specified methods.</returns>
            <exception cref="T:System.ArgumentException">If any of the new methods' argument types do
            not exactly match the old methods' argument types.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.TryGetFieldValue``1(System.Object,System.String,``0@)">
            <summary>
            Attempts to read a field value from an object of a type not in this assembly.
            
            If this operation is expected to be performed more than once on the same object,
            use a delegate. If the type of the object is known, use Detours.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The field name.</param>
            <param name="value">The location where the field value will be stored.</param>
            <returns>true if the field was read, or false if the field was not found or
            has the wrong type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.TryGetPropertyValue``1(System.Object,System.String,``0@)">
            <summary>
            Attempts to read a property value from an object of a type not in this assembly.
            
            If this operation is expected to be performed more than once on the same object,
            use a delegate. If the type of the object is known, use Detours.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="source">The source object.</param>
            <param name="name">The property name.</param>
            <param name="value">The location where the property value will be stored.</param>
            <returns>true if the property was read, or false if the property was not found or
            has the wrong type.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PPatchTools.WrapWithErrorLogger(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator)">
            <summary>
            Transpiles a method to wrap it with a try/catch that logs and rethrows all
            exceptions.
            </summary>
            <param name="method">The method body to patch.</param>
            <param name="generator">The IL generator to make labels.</param>
            <returns>A transpiled version of that method that is wrapped with an error
            logger.</returns>
        </member>
        <member name="T:PeterHan.PLib.Core.PRegistry">
            <summary>
            Provides the user facing API to the PLib Registry.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PRegistry.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistry.instance">
            <summary>
            A pointer to the active PLib registry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistry.instanceLock">
            <summary>
            Ensures that PLib can only be initialized by one thread at a time.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.GetData``1(System.String)">
            <summary>
            Retrieves a value from the single-instance share.
            </summary>
            <typeparam name="T">The type of the desired data.</typeparam>
            <param name="key">The string key to retrieve. <i>Suggested key format: YourMod.
            Category.KeyName</i></param>
            <returns>The data associated with that key.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.Init">
            <summary>
            Initializes the patch bootstrapper, creating a PRegistry if not yet present.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.LogPatchDebug(System.String)">
            <summary>
            Logs a debug message while patching in PLib patches.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.LogPatchWarning(System.String)">
            <summary>
            Logs a warning encountered while patching in PLib patches.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistry.PutData(System.String,System.Object)">
            <summary>
            Saves a value into the single-instance share.
            </summary>
            <param name="key">The string key to set. <i>Suggested key format: YourMod.
            Category.KeyName</i></param>
            <param name="value">The data to be associated with that key.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PRegistryComponent">
            <summary>
            A custom component added to manage shared data between mods, especially instances of
            PForwardedComponent used by both PLib and other mods.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.PLIB_HARMONY">
            <summary>
            The Harmony instance name used when patching via PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.instance">
            <summary>
            A pointer to the active PLib registry.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.instantiated">
            <summary>
            true if the forwarded components have been instantiated, or false otherwise.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.ApplyLatest">
            <summary>
            Applies the latest version of all forwarded components.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PRegistryComponent.ModData">
            <summary>
            Stores shared mod data which needs single instance existence. Available to all
            PLib consumers through PLib API.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PRegistryComponent.PLibInstance">
            <summary>
            The Harmony instance used by PLib patching.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.forwardedComponents">
            <summary>
            The candidate components with versions, from multiple assemblies.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.instantiatedComponents">
            <summary>
            The components actually instantiated (latest version of each).
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRegistryComponent.latestComponents">
            <summary>
            The latest versions of each component.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.AddCandidateVersion(System.String,PeterHan.PLib.Core.PForwardedComponent)">
            <summary>
            Adds a remote or local forwarded component by ID.
            </summary>
            <param name="id">The real ID of the component.</param>
            <param name="instance">The candidate instance to add.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.ApplyBootstrapper">
            <summary>
            Applies a bootstrapper patch which will complete forwarded component initialization
            before mods are post-loaded.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.DoAddCandidateVersion(System.Object)">
            <summary>
            Called from other mods to add a candidate version of a particular component.
            </summary>
            <param name="instance">The component to be added.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.DoGetAllComponents(System.String)">
            <summary>
            Called from other mods to get a list of all components with the given ID.
            </summary>
            <param name="id">The component ID to retrieve.</param>
            <returns>The instantiated instance of that component, or null if no component by
            that name was found or ever registered.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.DoGetLatestVersion(System.String)">
            <summary>
            Called from other mods to get the instantiated version of a particular component.
            </summary>
            <param name="id">The component ID to retrieve.</param>
            <returns>The instantiated instance of that component, or null if no component by
            that name was found or successfully instantiated.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PRegistryComponent.Instantiate">
            <summary>
            Goes through the forwarded components, and picks the latest version of each to
            instantiate.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PriorityQueue`1">
            <summary>
            A class similar to Queue<typeparamref name="T"/> that allows efficient access to its
            items in ascending order.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.ChildIndex(System.Int32)">
            <summary>
            Returns the index of the specified item's first child. Its second child index is
            that index plus one.
            </summary>
            <param name="index">The item index.</param>
            <returns>The index of its first child.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.ParentIndex(System.Int32)">
            <summary>
            Returns the index of the specified item's parent.
            </summary>
            <param name="index">The item index.</param>
            <returns>The index of its parent.</returns>
        </member>
        <member name="P:PeterHan.PLib.Core.PriorityQueue`1.Count">
            <summary>
            The number of elements in this queue.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PriorityQueue`1.heap">
            <summary>
            The heap where the items are stored.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.#ctor">
            <summary>
            Creates a new PriorityQueue&lt;<typeparamref name="T"/>&gt; with the default
            initial capacity.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Creates a new PriorityQueue&lt;<typeparamref name="T"/>&gt; with the specified
            initial capacity.
            </summary>
            <param name="capacity">The initial capacity of this queue.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Clear">
            <summary>
            Removes all objects from this PriorityQueue&lt;<typeparamref name="T"/>&gt;.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Contains(`0)">
            <summary>
            Returns whether the specified key is present in this priority queue. This operation
            is fairly slow, use with caution.
            </summary>
            <param name="key">The key to check.</param>
            <returns>true if it exists in this priority queue, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Dequeue">
            <summary>
            Removes and returns the smallest object in the
            PriorityQueue&lt;<typeparamref name="T"/>&gt;.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <returns>The object that is removed from this PriorityQueue.</returns>
            <exception cref="T:System.InvalidOperationException">If this queue is empty.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the PriorityQueue&lt;<typeparamref name="T"/>&gt;.
            </summary>
            <param name="item">The object to add to this PriorityQueue.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityQueue`1.Peek">
            <summary>
            Returns the smallest object in the PriorityQueue&lt;<typeparamref name="T"/>&gt;
            without removing it.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <returns>The smallest object in this PriorityQueue.</returns>
            <exception cref="T:System.InvalidOperationException">If this queue is empty.</exception>
        </member>
        <member name="T:PeterHan.PLib.Core.PriorityDictionary`2">
            <summary>
            A priority queue that includes a paired value.
            </summary>
            <typeparam name="K">The type to use for the sorting in the PriorityQueue.</typeparam>
            <typeparam name="V">The type to include as extra data.</typeparam>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.#ctor">
            <summary>
            Creates a new PriorityDictionary&lt;<typeparamref name="K"/>,
            <typeparamref name="V"/>&gt; with the default initial capacity.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates a new PriorityDictionary&lt;<typeparamref name="K"/>,
            <typeparamref name="V"/>&gt; with the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of this dictionary.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.Dequeue(`0@,`1@)">
            <summary>
            Removes and returns the smallest object in the
            PriorityDictionary&lt;<typeparamref name="K"/>, <typeparamref name="V"/>&gt;.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <param name="key">The key of the object removed.</param>
            <param name="value">The value of the object removed.</param>
            <exception cref="T:System.InvalidOperationException">If this dictionary is empty.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.Enqueue(`0,`1)">
            <summary>
            Adds an object to the PriorityDictionary&lt;<typeparamref name="K"/>,
            <typeparamref name="V"/>&gt;.
            </summary>
            <param name="item">The object to add to this PriorityDictionary.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.Peek(`0@,`1@)">
            <summary>
            Returns the smallest object in the PriorityDictionary&lt;<typeparamref name="K"/>,
            <typeparamref name="V"/>&gt; without removing it.
            
            If multiple objects are the smallest object, an unspecified one is returned.
            </summary>
            <param name="key">The key of the smallest object.</param>
            <param name="value">The value of the smallest object.</param>
            <exception cref="T:System.InvalidOperationException">If this dictionary is empty.</exception>
        </member>
        <member name="T:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair">
            <summary>
            Stores a value with the key that is used for comparison.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair.Key">
            <summary>
            Retrieves the key of this QueueItem.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair.Value">
            <summary>
            Retrieves the value of this QueueItem.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PriorityDictionary`2.PriorityQueuePair.#ctor(`0,`1)">
            <summary>
            Creates a new priority queue pair.
            </summary>
            <param name="key">The item key.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PStateMachines">
            <summary>
            Contains tools for dealing with state machines.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.CreateState``2(GameStateMachine{``0,``1},System.String)">
            <summary>
            Creates and initializes a new state. This method should be used in a postfix patch
            on InitializeStates if new states are to be added.
            </summary>
            <typeparam name="T">The state machine type.</typeparam>
            <typeparam name="I">The state machine Instance type.</typeparam>
            <param name="sm">The base state machine.</param>
            <param name="name">The state name.</param>
            <returns>The new state.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.CreateState``3(GameStateMachine{``0,``1,``2},System.String)">
            <summary>
            Creates and initializes a new state. This method should be used in a postfix patch
            on InitializeStates if new states are to be added.
            </summary>
            <typeparam name="T">The state machine type.</typeparam>
            <typeparam name="I">The state machine Instance type.</typeparam>
            <typeparam name="M">The state machine Target type.</typeparam>
            <param name="sm">The base state machine.</param>
            <param name="name">The state name.</param>
            <returns>The new state.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.ClearEnterActions(StateMachine.BaseState)">
            <summary>
            Clears the existing Enter actions on a state.
            </summary>
            <param name="state">The state to modify.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.ClearExitActions(StateMachine.BaseState)">
            <summary>
            Clears the existing Exit actions on a state.
            </summary>
            <param name="state">The state to modify.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PStateMachines.ClearTransitions(StateMachine.BaseState)">
            <summary>
            Clears the existing Transition actions on a state. Parameter transitions are not
            affected.
            </summary>
            <param name="state">The state to modify.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PTranspilerTools">
            <summary>
            A utility class with transpiler tools.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PTranspilerTools.BRANCH_CODES">
            <summary>
            The opcodes that branch control conditionally.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PTranspilerTools.LOAD_INT">
            <summary>
            Opcodes to load an integer onto the stack.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.CompareMethodParams(System.Reflection.MethodInfo,System.Type[],System.Reflection.MethodInfo)">
            <summary>
            Compares the method parameters and throws ArgumentException if they do not match.
            </summary>
            <param name="victim">The victim method.</param>
            <param name="paramTypes">The method's parameter types.</param>
            <param name="newMethod">The replacement method.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.GenerateBasicLoad(System.Reflection.Emit.ILGenerator,System.Type,System.Object)">
            <summary>
            Pushes the specified value onto the evaluation stack. This method does not work on
            compound value types or by-ref types, as those need a local variable. If the value
            is DBNull.Value, then default(value) will be used instead.
            </summary>
            <param name="generator">The IL generator where the opcodes will be emitted.</param>
            <param name="type">The type of the value to generate.</param>
            <param name="value">The value to load.</param>
            <returns>true if instructions were pushed (all basic types and reference types),
            or false otherwise (by ref type or compound value type).</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.GenerateDefaultLoad(System.Reflection.Emit.ILGenerator,System.Type,System.Object)">
            <summary>
            Creates a local if necessary, and generates initialization code for the default
            value of the specified type. The resulting value ends up on the stack in a form
            that it would be used for the method argument.
            </summary>
            <param name="generator">The IL generator where the opcodes will be emitted.</param>
            <param name="type">The type to load and initialize.</param>
            <param name="defaultValue">The default value to load.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.GetParameterTypes(System.Reflection.MethodInfo)">
            <summary>
            Gets the method's parameter types.
            </summary>
            <param name="method">The method to query.</param>
            <returns>The type of each parameter of the method.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.IsConditionalBranchInstruction(System.Reflection.Emit.OpCode)">
            <summary>
            Checks to see if an instruction opcode is a branch instruction.
            </summary>
            <param name="opcode">The opcode to check.</param>
            <returns>true if it is a branch, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.LogAllExceptions">
            <summary>
            Adds a logger to all unhandled exceptions.
            
            Not for production use.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.LogAllFailedAsserts">
            <summary>
            Adds a logger to all failed assertions. The assertions will still fail, but a stack
            trace will be printed for each failed assertion.
            
            Not for production use.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.ModifyLoadI4(HarmonyLib.CodeInstruction,System.Int32)">
            <summary>
            Modifies a load instruction to load the specified constant, using short forms if
            possible.
            </summary>
            <param name="instruction">The instruction to modify.</param>
            <param name="newValue">The new i4 constant to load.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.OnAssertFailed(System.Boolean)">
            <summary>
            Logs a failed assertion that is about to occur.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.OnThrown(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            An optional handler for all unhandled exceptions.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PTranspilerTools.PushDeclaringType(System.Type[],System.Type)">
            <summary>
            Inserts the declaring instance type to the front of the specified array.
            </summary>
            <param name="types">The parameter types.</param>
            <param name="declaringType">The type which declared this method.</param>
            <returns>The types with declaringType inserted at the beginning.</returns>
        </member>
        <member name="T:PeterHan.PLib.Core.PUtil">
            <summary>
            Static utility functions used across mods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PUtil.GameVersion">
            <summary>
            Retrieves the current changelist version of the game. LU-371502 has a version of
            371502u.
            
            If the version cannot be determined, returns 0.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PUtil.initialized">
            <summary>
            Whether PLib has been initialized.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PUtil.initializeLock">
            <summary>
            Serializes attempts to initialize PLib.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PUtil.INVALID_FILE_CHARS">
            <summary>
            The characters which are not allowed in file names.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.CreateAssemblyToModTable">
            <summary>
            Generates a mapping of assembly names to Mod instances. Only works after all mods
            have been loaded.
            </summary>
            <returns>A mapping from assemblies to the Mod instance that owns them.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Finds the distance between two points.
            </summary>
            <param name="x1">The first X coordinate.</param>
            <param name="y1">The first Y coordinate.</param>
            <param name="x2">The second X coordinate.</param>
            <param name="y2">The second Y coordinate.</param>
            <returns>The non-taxicab (straight line) distance between the points.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds the distance between two points.
            </summary>
            <param name="x1">The first X coordinate.</param>
            <param name="y1">The first Y coordinate.</param>
            <param name="x2">The second X coordinate.</param>
            <param name="y2">The second Y coordinate.</param>
            <returns>The non-taxicab (straight line) distance between the points.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.GetGameVersion">
            <summary>
            Retrieves the current game version from the Klei code.
            </summary>
            <returns>The change list version of the game, or 0 if it cannot be determined.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.GetModPath(System.Reflection.Assembly)">
            <summary>
            Retrieves the mod directory for the specified assembly. If an archived version is
            running, the path to that version is reported.
            </summary>
            <param name="modDLL">The assembly used for a mod.</param>
            <returns>The directory where the mod is currently executing.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.InitLibrary(System.Boolean)">
            <summary>
            Initializes PLib. While most components are initialized dynamically if used, some
            key infrastructure must be initialized first.
            </summary>
            <param name="logVersion">If true, the mod name and version is emitted to the log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.IsValidFileName(System.String)">
            <summary>
            Returns true if the file is a valid file name. If the argument contains path
            separator characters, this method returns false, since that is not a valid file
            name.
            
            Null and empty file names are not valid file names.
            </summary>
            <param name="file">The file name to check.</param>
            <returns>true if the name could be used to name a file, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogDebug(System.Object)">
            <summary>
            Logs a message to the debug log.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogError(System.Object)">
            <summary>
            Logs an error message to the debug log.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogException(System.Exception)">
            <summary>
            Logs an exception message to the debug log.
            </summary>
            <param name="thrown">The exception to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogExcWarn(System.Exception)">
            <summary>
            Logs an exception message to the debug log at WARNING level.
            </summary>
            <param name="thrown">The exception to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.LogWarning(System.Object)">
            <summary>
            Logs a warning message to the debug log.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PeterHan.PLib.Core.PUtil.Time(System.Action,System.String)">
            <summary>
            Measures how long the specified code takes to run. The result is logged to the
            debug log in microseconds.
            </summary>
            <param name="code">The code to execute.</param>
            <param name="header">The name used in the log to describe this code.</param>
        </member>
        <member name="T:PeterHan.PLib.Core.PVersionList">
            <summary>
            Stores a list of forwarded component versions and their shared data.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PVersionList.Components">
            <summary>
            The list of registered components.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.Core.PVersionList.SharedData">
            <summary>
            The data shared between all components.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteComponent">
            <summary>
            Delegates calls to forwarded components in other assemblies.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteComponent.InitializeDelegate">
            <summary>
            The prototype used for delegates to remote Initialize.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteComponent.ProcessDelegate">
            <summary>
            The prototype used for delegates to remote Process.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.doBootstrap">
            <summary>
            Points to the component's version of Bootstrap.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.doInitialize">
            <summary>
            Points to the component's version of Initialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.doPostInitialize">
            <summary>
            Points to the component's version of PostInitialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.getData">
            <summary>
            Gets the component's data.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.process">
            <summary>
            Runs the processing method of the component.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.setData">
            <summary>
            Sets the component's data.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.version">
            <summary>
            The component's version.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteComponent.wrapped">
            <summary>
            The wrapped instance from the other mod.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry">
            <summary>
            Transparently provides the functionality of PRegistry, while the actual instance is
            from another mod's bootstrapper.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry.GetAllComponentsDelegate">
            <summary>
            The prototype used for delegates to remote GetAllComponents.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry.GetObjectDelegate">
            <summary>
            The prototype used for delegates to remote GetLatestVersion and GetSharedData.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.Core.PRemoteRegistry.SetObjectDelegate">
            <summary>
            The prototype used for delegates to remote SetSharedData.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.addCandidateVersion">
            <summary>
            Points to the local registry's version of AddCandidateVersion.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.getAllComponents">
            <summary>
            Points to the local registry's version of GetAllComponents.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.getLatestVersion">
            <summary>
            Points to the local registry's version of GetLatestVersion.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.getSharedData">
            <summary>
            Points to the local registry's version of GetSharedData.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.setSharedData">
            <summary>
            Points to the local registry's version of SetSharedData.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.Core.PRemoteRegistry.remoteComponents">
            <summary>
            The components actually instantiated (latest version of each).
            </summary>
        </member>
        <member name="M:PeterHan.PLib.Core.PRemoteRegistry.#ctor(System.Object)">
            <summary>
            Creates a remote registry wrapping the target object.
            </summary>
            <param name="instance">The PRegistryComponent instance to wrap.</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.IPatchMethodInstance">
            <summary>
            Refers to a single instance of the annotation, with its annotated method.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.IPatchMethodInstance.Run(HarmonyLib.Harmony)">
            <summary>
            Runs the patch or method if the conditions are met. This method should check its
            preconditions before executing the target.
            </summary>
            <param name="instance">The Harmony instance to use.</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.IPLibAnnotation">
            <summary>
            The commmon parent of [PLibPatch] and [PLibMethod].
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.IPLibAnnotation.Runtime">
            <summary>
            When this method is run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.IPLibAnnotation.CreateInstance(System.Reflection.MethodInfo)">
            <summary>
            Creates a new patch method instance.
            </summary>
            <param name="method">The method that was attributed.</param>
            <returns>An instance that can execute this patch.</returns>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibMethodAttribute">
            <summary>
            Represents a method that will be run by PLib at a specific time to reduce the number
            of patches required and allow conditional integration with other mods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodAttribute.RequireAssembly">
            <summary>
            Requires the specified assembly to be loaded for this method to run. If RequireType
            is null or empty, no particular types need to be defined in the assembly. The
            assembly name is required, but the version is optional (strong named assemblies
            can never load in ONI, since neither Unity nor Klei types are strong named...)
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodAttribute.RequireType">
            <summary>
            Requires the specified type full name (not assembly qualified name) to exist for
            this method to run. If RequireAssembly is null or empty, a type in any assembly
            will satisfy the requirement.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodAttribute.Runtime">
            <summary>
            When this method is run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibMethodAttribute.CreateInstance(System.Reflection.MethodInfo)">
            <summary>
            Creates a new patch method instance.
            </summary>
            <param name="method">The method that was attributed.</param>
            <returns>An instance that can execute this patch.</returns>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibMethodInstance">
            <summary>
            Refers to a single instance of the annotation, with its annotated method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodInstance.Descriptor">
            <summary>
            The attribute describing the method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibMethodInstance.Method">
            <summary>
            The method to run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibMethodInstance.Run(HarmonyLib.Harmony)">
            <summary>
            Runs the method, passing the required parameters if any.
            </summary>
            <param name="instance">The Harmony instance to use if the method wants to
            perform a patch.</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibPatchAttribute">
            <summary>
            Represents a method that will be patched by PLib at a specific time to allow
            conditional integration with other mods.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.ArgumentTypes">
            <summary>
            The required argument types. If null, any matching method name is patched, or an
            exception thrown if more than one matches.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.IgnoreOnFail">
            <summary>
            If this flag is set, the patch will emit only at DEBUG level if the target method
            is not found or matches ambiguously.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.MethodName">
            <summary>
            The name of the method to patch.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.PatchType">
            <summary>
            The type of patch to apply through Harmony.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.RequireAssembly">
            <summary>
            Requires the specified assembly to be loaded for this method to run. If RequireType
            is null or empty, no particular types need to be defined in the assembly. The
            assembly name is required, but the version is optional (strong named assemblies
            can never load in ONI, since neither Unity nor Klei types are strong named...)
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.RequireType">
            <summary>
            Requires the specified type full name (not assembly qualified name) to exist for
            this method to run. If RequireAssembly is null or empty, a type in any assembly
            will satisfy the requirement.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.Runtime">
            <summary>
            When this method is run.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchAttribute.TargetType">
            <summary>
            The type to patch. If null, the patcher will try to use the required type from the
            RequireType parameter.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.Type,System.String)">
            <summary>
            Patches a concrete type and method.
            
            Passing null as the method name will attempt to patch a constructor. Only one
            declared constructor may be present, or the call will fail at patch time.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="target">The type to patch.</param>
            <param name="method">The method name to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.Type,System.String,System.Type[])">
            <summary>
            Patches a concrete type and overloaded method.
            
            Passing null as the method name will attempt to patch a constructor.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="target">The type to patch.</param>
            <param name="method">The method name to patch.</param>
            <param name="argTypes">The types of the overload to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.String)">
            <summary>
            Patches a method only if a specified type is available. Use optional parameters to
            specify the type to patch using RequireType / RequireAssembly.
            
            Passing null as the method name will attempt to patch a constructor. Only one
            declared constructor may be present, or the call will fail at patch time.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="method">The method name to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.#ctor(System.UInt32,System.String,System.Type[])">
            <summary>
            Patches an overloaded method only if a specified type is available. Use optional
            parameters to specify the type to patch using RequireType / RequireAssembly.
            
            Passing null as the method name will attempt to patch a constructor.
            </summary>
            <param name="runtime">When to apply the patch.</param>
            <param name="method">The method name to patch.</param>
            <param name="argTypes">The types of the overload to patch.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchAttribute.CreateInstance(System.Reflection.MethodInfo)">
            <summary>
            Creates a new patch method instance.
            </summary>
            <param name="method">The method that was attributed.</param>
            <returns>An instance that can execute this patch.</returns>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PLibPatchInstance">
            <summary>
            Refers to a single instance of the annotation, with its annotated method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchInstance.Descriptor">
            <summary>
            The attribute describing the method.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PLibPatchInstance.Method">
            <summary>
            The method to run.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.GetPatchType">
            <summary>
            Calculates the patch type to perform.
            </summary>
            <returns>The type of Harmony patch to use for this method.</returns>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.GetTargetConstructor(System.Type,System.Type[])">
            <summary>
            Gets the specified instance constructor.
            </summary>
            <param name="targetType">The type to be constructed.</param>
            <returns>The target constructor.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">If no parameter types were specified,
            and multiple declared constructors exist.</exception>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.GetTargetMethod(System.Type)">
            <summary>
            Calculates the target method to patch.
            </summary>
            <param name="requiredType">The type to use if no type was specified.</param>
            <returns>The method to patch.</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">If no parameter types were specified,
            and multiple options match the method name.</exception>
            <exception cref="T:System.InvalidOperationException">If the target method was not found.</exception>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.LogIgnoreOnFail(System.Exception)">
            <summary>
            Logs a message at debug level if Ignore On Patch Fail is enabled.
            </summary>
            <param name="e">The exception thrown during patching.</param>
            <returns>true to suppress the exception, or false to rethrow it.</returns>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PLibPatchInstance.Run(HarmonyLib.Harmony)">
            <summary>
            Applies the patch.
            </summary>
            <param name="instance">The Harmony instance to use.</param>
            <exception cref="T:System.InvalidOperationException">If the </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">If no parameter types were specified,
            and multiple options match the method name.</exception>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.PPatchManager">
            <summary>
            Manages patches that PLib will conditionally apply.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.FLAGS">
            <summary>
            The base flags to use when matching instance or static methods.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.FLAGS_EITHER">
            <summary>
            The flags to use when matching instance and static methods.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.VERSION">
            <summary>
            The version of this component. Uses the running PLib version.
            </summary>
        </member>
        <member name="P:PeterHan.PLib.PatchManager.PPatchManager.Instance">
            <summary>
            The instantiated copy of this class.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.afterModsLoaded">
            <summary>
            true if the AfterModsLoad patches have been run, or false otherwise.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.harmony">
            <summary>
            The Harmony instance to use for patching.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.PPatchManager.patches">
            <summary>
            Patches and delegates to be run at specific points in the runtime. Put the kibosh
            on patching Db.Initialize()!
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.CheckConditions(System.String,System.String,System.Type@)">
            <summary>
            Checks to see if the conditions for a method running are met.
            </summary>
            <param name="assemblyName">The assembly name that must be present, or null if none is required.</param>
            <param name="typeName">The type full name that must be present, or null if none is required.</param>
            <param name="requiredType">The type that was required, if typeName was not null or empty.</param>
            <returns>true if the requirements are met, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.#ctor(HarmonyLib.Harmony)">
            <summary>
            Creates a patch manager to execute patches at specific times.
            
            Create this instance in OnLoad() and use RegisterPatchClass to register a
            patch class.
            </summary>
            <param name="harmony">The Harmony instance to use for patching.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.AddHandler(System.UInt32,PeterHan.PLib.PatchManager.IPatchMethodInstance)">
            <summary>
            Schedules a patch method instance to be run.
            </summary>
            <param name="when">When to run the patch.</param>
            <param name="instance">The patch method instance to run.</param>
            <param name="harmony">The Harmony instance to use for patching.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.RegisterPatch(System.UInt32,PeterHan.PLib.PatchManager.IPatchMethodInstance)">
            <summary>
            Registers a single patch to be run by Patch Manager. Obviously, the patch must be
            registered before the time that it is used.
            </summary>
            <param name="when">The time when the method should be run.</param>
            <param name="patch">The patch to execute.</param>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.PPatchManager.RegisterPatchClass(System.Type)">
            <summary>
            Registers a class containing methods for [PLibPatch] and [PLibMethod] handlers.
            All methods, public and private, of the type will be searched for annotations.
            However, nested and derived types will not be searched, nor will inherited methods.
            
            This method cannot be used to register a class from another mod, as the annotations
            on those methods would have a different assembly qualified name and would thus
            not be recognized.
            </summary>
            <param name="type">The type to register.</param>
            <param name="harmony">The Harmony instance to use for immediate patches. Use
            the instance provided from UserMod2.OnLoad().</param>
        </member>
        <member name="T:PeterHan.PLib.PatchManager.RunAt">
            <summary>
            Describes when a PLibPatch or PLibMethod should be invoked.
            
            Due to a bug in ILRepack an enum type in PLib cannot be used as a parameter for a
            custom attribute. ILmerge does not have this bug.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.Immediately">
            <summary>
            Runs the method/patch now.
            
            Note that mods may load in any order and thus not all mods may be initialized at
            this time.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.AfterModsLoad">
            <summary>
            Runs after all mods load, but before most other aspects of the game (including
            Assets, Db, and so forth) are initialized. This will run before any other mod
            has their UserMod2.AfterModsLoad executed. All PLib components will be initialized
            by this point.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.BeforeDbInit">
            <summary>
            Runs immediately before Db.Initialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.AfterDbInit">
            <summary>
            Runs immediately after Db.Initialize.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.InMainMenu">
            <summary>
            Runs when the main menu has loaded.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.OnStartGame">
            <summary>
            Runs when Game.OnPrefabInit has completed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.OnEndGame">
            <summary>
            Runs when Game.DestroyInstances is executed.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.AfterLayerableLoad">
            <summary>
            Runs after all mod data (including layerable files like world gen and codex/
            elements) are loaded. This comes after all UserMod2.AfterModsLoad handlers execute.
            All PLib components will be initialized by this point.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PatchManager.RunAt.STRING_VALUES">
            <summary>
            The string equivalents of each constant for debugging.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.PatchManager.RunAt.ToString(System.UInt32)">
            <summary>
            Gets a human readable representation of a run time constant.
            </summary>
            <param name="runtime">The time when the patch should be run.</param>
        </member>
        <member name="T:PeterHan.PLib.PVersion">
            <summary>
            Used to pass the PLib version in the ILMerged assembly since the PLib version will
            not be included in the file version.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.PVersion.VERSION">
            <summary>
            The PLib version.
            </summary>
        </member>
        <member name="T:PeterHan.PLib.UI.TextMeshProPatcher">
            <summary>
            Patches bugs in Text Mesh Pro.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.TextMeshProPatcher.HARMONY_ID">
            <summary>
            The ID to use for Harmony patches.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.TextMeshProPatcher.patchChecked">
            <summary>
            Tracks whether the TMP patches have been checked.
            </summary>
        </member>
        <member name="F:PeterHan.PLib.UI.TextMeshProPatcher.patchLock">
            <summary>
            Serializes multiple thread access to the patch status.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.AssignPositioningIfNeeded_Prefix(TMPro.TMP_InputField,UnityEngine.RectTransform,TMPro.TMP_Text)">
            <summary>
            Applied to TMP_InputField to fix a bug that prevented auto layout from ever
            working.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.HasOurPatch(System.Collections.Generic.IEnumerable{HarmonyLib.Patch})">
            <summary>
            Checks to see if a patch with our class name has already been applied.
            </summary>
            <param name="patchList">The patch list to search.</param>
            <returns>true if a patch with this class has already patched the method, or false otherwise.</returns>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.InputFieldPatches(System.Type)">
            <summary>
            Patches TMP_InputField with fixes, but only if necessary.
            </summary>
            <param name="tmpType">The type of TMP_InputField.</param>
            <param name="instance">The Harmony instance to use for patching.</param>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.OnEnable_Postfix(UnityEngine.UI.Scrollbar,TMPro.TMP_Text)">
            <summary>
            Applied to TMPro.TMP_InputField to fix a clipping bug inside of Scroll Rects.
            
            https://forum.unity.com/threads/textmeshpro-text-still-visible-when-using-nested-rectmask2d.537967/
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.Patch">
            <summary>
            Patches Text Mesh Pro input fields to fix a variety of bugs. Should be used before
            any Text Mesh Pro objects are created.
            </summary>
        </member>
        <member name="M:PeterHan.PLib.UI.TextMeshProPatcher.ResizeCaret(UnityEngine.RectTransform,UnityEngine.RectTransform)">
            <summary>
            Resizes the caret object to match the text. Used as an enumerator.
            </summary>
            <param name="caretTransform">The rectTransform of the caret.</param>
            <param name="textTransform">The rectTransform of the text.</param>
        </member>
    </members>
</doc>
